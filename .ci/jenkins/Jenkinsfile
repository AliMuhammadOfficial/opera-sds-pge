#!/usr/bin/env groovy

// Copyright 2021, by the California Institute of Technology.
// ALL RIGHTS RESERVED.
// United States Government sponsorship acknowledged.
// Any commercial use must be negotiated with the Office of Technology Transfer
// at the California Institute of Technology.
// This software may be subject to U.S. export control laws and regulations.
// By accepting this document, the user agrees to comply with all applicable
// U.S. export laws and regulations. User has the responsibility to obtain
// export licenses, or other export authority as may be required, before
// exporting such information to foreign countries or providing access to
// foreign persons.

pipeline {
    agent any
    parameters {
        string(name: 'ART_URL', defaultValue: 'https://artifactory-fn.jpl.nasa.gov/artifactory',
               description: 'Artifactory-FN URL.')
        string(name: 'ART_TAR_PATH', defaultValue: 'general/gov/nasa/jpl/opera/sds/pge/',
               description: 'Artifactory path to publish PGE docker image tar files to.')
        string(name: 'ART_DOCKER_PATH', defaultValue: '/gov/nasa/jpl/opera/sds/pge/',
               description: 'Artifactory path to push Docker images.')
        string(name: 'ART_DOCKER_REGISTRY', defaultValue: 'artifactory-fn.jpl.nasa.gov:16001',
               description: 'Address of Artifactory-FN Docker registry for uploading Docker images.')
        credentials (name: 'ART_CREDENTIALS',
                     defaultValue: 'collinss-artifactory-fn-credentials',
                     credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
                     description: 'Artifactory-FN credentials for account collinss. Used to push/pull images from Artifactory during build.',
                     required: true)
    }
    environment {
        DOCKER_IMAGE_PREFIX = 'opera_pge'
        DOCKER_IMAGE_SUFFIXES = 'dswx_hls'
        DOCKER_TAG = """${sh(
                     returnStdout: true,
                     script: 'echo ${GIT_BRANCH##*/}'
                     ).trim()}"""
    }
    stages {
        stage('Build OPERA PGE Docker image(s)') {
            steps {
                script {
                    rtServer (
                        id: 'ARTIFACTORY_FN_DOCKER_REGISTRY',
                        url: params.ART_DOCKER_REGISTRY,
                        username: params.ART_CREDENTIALS_USR,
                        password: params.ART_CREDENTIALS_PSW,
                        timeout: 300
                    )

                    echo "Building ${DOCKER_IMAGE_PREFIX} docker images with tag ${DOCKER_TAG}"
                    sh label: 'Build all OPERA Docker images',
                       script: ".ci/scripts/build_all_images.sh $DOCKER_TAG"
                }
            }
        }
        stage('Test OPERA PGE Docker image(s)') {
            steps {
                echo "Testing ${DOCKER_IMAGE_PREFIX} docker images with tag ${DOCKER_TAG}"
                sh label: 'Test all OPERA Docker images',
                   script: ".ci/scripts/test_all_images.sh $DOCKER_TAG"
                junit 'test_results/**/*.xml'
                archiveArtifacts artifacts: 'test_results/**/*.log', fingerprint: true
            }
        }
        stage('Upload OPERA PGE Docker image tar files to Artifactory-FN') {
            steps {
                script {
                    rtServer (
                        id: 'ARTIFACTORY_FN_SERVER',
                        url: params.ART_URL,
                        username: params.ART_CREDENTIALS_USR,
                        password: params.ART_CREDENTIALS_PSW,
                        timeout: 300
                    )

                    DOCKER_IMAGE_SUFFIXES.tokenize(',').each { DOCKER_IMAGE_SUFFIX ->
                        DOCKER_IMAGE = "${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX}:${DOCKER_TAG}"
                        TAR_FILE_NAME = "${DOCKER_IMAGE_PREFIX}-${DOCKER_IMAGE_SUFFIX}-${DOCKER_TAG}.tar"
                        echo "Saving Docker image ${DOCKER_IMAGE} to tar file ${TAR_FILE_NAME}"
                        sh "docker save -o ${TAR_FILE_NAME} ${DOCKER_IMAGE}"
                        sh "gzip ${TAR_FILE_NAME}"
                        TAR_GZ_FILE_NAME = "${TAR_FILE_NAME}.gz"

                        echo "Uploading Docker image tar file to Artifactory-FN"

                        rtUpload(
                            serverId: "ARTIFACTORY_FN_SERVER",
                            spec:
                              """{
                                  "files": [
                                      {
                                          "pattern": "${TAR_GZ_FILE_NAME}",
                                          "target": "${params.ART_TAR_PATH}"
                                      }
                                  ]
                              }"""
                        )

                        sh "rm -f ${TAR_FILE_NAME} ${TAR_GZ_FILE_NAME}"
                    }
                }
            }
        }
        stage('Upload Docker images to Artifactory FN Docker Registry') {
            steps {
                script {
                    rtServer (
                        id: 'ARTIFACTORY_FN_DOCKER_REGISTRY',
                        url: params.ART_DOCKER_REGISTRY,
                        username: params.ART_CREDENTIALS_USR,
                        password: params.ART_CREDENTIALS_PSW,
                        timeout: 300
                    )

                    DOCKER_IMAGE_SUFFIXES.tokenize(',').each { DOCKER_IMAGE_SUFFIX ->
                        DOCKER_IMAGE = "${DOCKER_IMAGE_PREFIX}/${DOCKER_IMAGE_SUFFIX}:${DOCKER_TAG}"
                        sh "docker tag ${DOCKER_IMAGE} ${ART_DOCKER_REGISTRY}${ART_DOCKER_PATH}${DOCKER_IMAGE}"
                        echo "Publishing Docker Image ${DOCKER_IMAGE} to Artifactory FN Docker Registry"
                        rtDockerPush(
                            serverId: "ARTIFACTORY_FN_DOCKER_REGISTRY",
                            image: "${ART_DOCKER_REGISTRY}${ART_DOCKER_PATH}${DOCKER_IMAGE}",
                            targetRepo: "docker-develop-local"
                        )
                    }
                }
            }
        }
    }
}
